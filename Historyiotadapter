package com.sbi.upi.customerMode.modules.iot;

import android.content.Context;
import android.transition.AutoTransition;
import android.transition.TransitionManager;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.sbi.upi.R;
import com.sbi.upi.customerMode.common.data.models.response.banking.AccountDetail;

import java.util.List;

public class HistoryIOTAdapter extends RecyclerView.Adapter<HistoryIOTAdapter.AccountViewHolder> {

    private final List<AccountDetail> accountList;
    private final Context context;

    // Track the expanded position (-1 = none)
    private int expandedPosition = -1;

    // Callback interface for child click
    public interface OnParentChildClickListener {
        void onChildClicked(int parentPos, int childPos, String data);
    }

    private OnParentChildClickListener parentChildClickListener;

    public void setOnParentChildClickListener(OnParentChildClickListener listener) {
        this.parentChildClickListener = listener;
    }

    public HistoryIOTAdapter(Context context, List<AccountDetail> accountList) {
        this.context = context;
        this.accountList = accountList;
    }

    @NonNull
    @Override
    public AccountViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.revamp_item_iothistory, parent, false);
        return new AccountViewHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull AccountViewHolder holder, int position) {
        final int pos = position;
        boolean isExpandedNow = (pos == expandedPosition);

        // Show/hide child RecyclerView
        holder.rvChild.setVisibility(isExpandedNow ? View.VISIBLE : View.GONE);
        holder.btnMenu.setRotation(isExpandedNow ? 90f : 0f);

        // Set parent data (example)
        holder.tvTitle.setText(accountList.get(position).getAccountName());
        holder.tv_devicetype.setText("Device Type: " + accountList.get(position).getDeviceType());
        holder.tv_devicemodel.setText("Model: " + accountList.get(position).getDeviceModel());

        // Setup child adapter dynamically
        List<String> childItems = accountList.get(position).getChildList(); // <-- use your model's child list
        ChildAdapter childAdapter = new ChildAdapter(childItems, (childPos, data) -> {
            if (parentChildClickListener != null) {
                parentChildClickListener.onChildClicked(pos, childPos, data);
            }
        });
        holder.rvChild.setAdapter(childAdapter);

        // Expand/Collapse on parent menu click
        holder.btnMenu.setOnClickListener(v -> {
            int oldExpanded = expandedPosition;
            boolean currentlyExpanded = (expandedPosition == pos);

            if (currentlyExpanded) {
                // collapse
                expandedPosition = -1;
                TransitionManager.beginDelayedTransition((ViewGroup) holder.itemView, new AutoTransition());
                holder.rvChild.setVisibility(View.GONE);
                rotateIcon(holder.btnMenu, false);
            } else {
                expandedPosition = pos;
                if (oldExpanded >= 0) {
                    collapseOldItem(holder.itemView, oldExpanded);
                }
                TransitionManager.beginDelayedTransition((ViewGroup) holder.itemView, new AutoTransition());
                holder.rvChild.setVisibility(View.VISIBLE);
                rotateIcon(holder.btnMenu, true);
            }
        });
    }

    private void collapseOldItem(View currentItemView, int oldExpanded) {
        RecyclerView rv = findParentRecyclerView(currentItemView);
        if (rv != null) {
            RecyclerView.ViewHolder oldVH = rv.findViewHolderForAdapterPosition(oldExpanded);
            if (oldVH instanceof AccountViewHolder) {
                AccountViewHolder oldHolder = (AccountViewHolder) oldVH;
                TransitionManager.beginDelayedTransition((ViewGroup) oldHolder.itemView, new AutoTransition());
                oldHolder.rvChild.setVisibility(View.GONE);
                rotateIcon(oldHolder.btnMenu, false);
            } else {
                notifyItemChanged(oldExpanded);
            }
        } else {
            notifyItemChanged(oldExpanded);
        }
    }

    @Override
    public int getItemCount() {
        return accountList != null ? accountList.size() : 0;
    }

    static class AccountViewHolder extends RecyclerView.ViewHolder {
        TextView tvTitle, tv_devicetype, tv_devicemodel;
        ImageView btnMenu, ivDeviceIcon;
        RecyclerView rvChild;

        public AccountViewHolder(@NonNull View itemView) {
            super(itemView);
            ivDeviceIcon = itemView.findViewById(R.id.ivDeviceIcon);
            tvTitle = itemView.findViewById(R.id.tvTitle);
            tv_devicetype = itemView.findViewById(R.id.tv_devicetype);
            tv_devicemodel = itemView.findViewById(R.id.tv_devicemodel);
            btnMenu = itemView.findViewById(R.id.btnMenu);
            rvChild = itemView.findViewById(R.id.rv_child);
            rvChild.setLayoutManager(new LinearLayoutManager(itemView.getContext()));
            rvChild.setNestedScrollingEnabled(false); // important for smooth parent scroll
        }
    }

    private void rotateIcon(ImageView imageView, boolean expand) {
        float to = expand ? 90f : 0f;
        imageView.animate().rotation(to).setDuration(250).start();
    }

    private RecyclerView findParentRecyclerView(View v) {
        ViewParent parent = v.getParent();
        while (parent != null && !(parent instanceof RecyclerView)) {
            parent = parent.getParent();
        }
        return (RecyclerView) parent;
    }
}
